import os 
import requests 
import pefile 
import psutil 
import clamd 
import pyshark 
import tkinter as tk 
from tkinter import filedialog, messagebox 
from datetime import datetime 

# Step 1: Simulate Malware Detection
wannacry_iocs = [
    "C:\\Windows\\tasksche.exe",
    "C:\\Windows\\mssecsvc.exe",
    "C:\\Windows\\tasksche.exe"    
]

def detect_wannacry():
    detected_iocs = []
    for ioc in wannacry_iocs:
        if os.path.exists(ioc):
            detected_iocs.append(ioc)
        return detected_iocs

def clamav_scan(file_path):
    clamd_socket = '/var/run/clamav/clamd.ctl'
    cd = clamd.ClamUnixSocket(clamd_socket)
    result = cd.scan(file_path)
    return result

def heuristic_analysis(file_path):
    # Simpole heuristic analysis based on file size and PE structure
    pe = pefile.PE(file_path)
    suspicious = False 
    if pe.OPTIONAL_HEADER.SizeOfImage > 1000000: # Arbitary threshold
        suspicious = True
    if any(section.Name.startswith(b'.text') and section.SizeOfRawData > 500000 for section in pe.sections):
        suspicious = True
    return suspicious

def behavioral_analysis(process_name):
    for proc in psutil.process_iter(['pid', 'name']):
        if proc.info['name'] == process_name:
            print(f"Monitoring process: {proc.info['name']} (PID: {proc.info['pid']})")
            while True:
                cpu_usage = proc.cpu_percent(interval=1)
                mem_usage = proc.memory_info().rss
                print(f"CPU Usage: {cpu_usage}%, Memory Usage: {mem_usage / (1024 * 1024)} MB")
                if cpu_usage > 80: # Arbitrary threshold
                    print("High CPU usage detected, potential malware activity.")
                if not proc.is_running():
                    print("Process terminated")
                    break

def network_monitor():
    capture = pyshark.LiveCapture(interface='eth0')
    capture.sniff(timeout=10)
    for packet in capture.sniff_continuously(packet_cont=10):
        if 'HTTP' in packet:
            if 'iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea' in str(packet.http):
                print("WannaCry kill switch domain detected in network traffic.")

# Step 2: Activate Kill Switch
def activate_kill_switch():
    kill_switch_url = "http://www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com"
    try:
        response = requests.get(kill_switch_url)
        if response.status_code == 200:
            print("Kill switch domain is active. WannaCry will not spread.")
        else:
            print("Kill switch domain is not reachable.")
    except requests.RequestException as e:
        print(f"Error reaching kill switch domain: {e}")

# Step 3: Preventive Measaures
def apply_preventive_measures():
    print("Applying preventive measures...")
    print("1. Ensure all Windows updates are applied.")
    print("2. Disable SMBv1:")
    print("   - Windows 10: Control Panel > Programs > Turn Windows features on or off > Uncheck SMB 1.0/CIFS File Sharing Support.")
    print("   - Command line: powershell -NoProfile -ExecutionPolicy Unrestricted -Command \"Set-SmbServerConfiguration -EnableSMB1Protocol $false\"")
    print("3. Use a reputable antivirus software and keep it updated.")
    print("4. Isolate the infected machine from the network to prevent spreading.")

# GUI Integration
class MalwareAnalysisGUI:
    def __init__(self, master):
        self.master = master
        master.title("Advanced Malware Analysis Tool")

        self.label = tk.Label(master, text="Select a file to analyze")
        self.label.pack()

        self.file_path = tk.Entry(master, width=50)
        self.file_path.pack()

        self.browse_button = tk.Button(master, text="Browse", command=self.browse_file)
        self.browse_button.pack()

        self.static_var = tk.IntVar()
        self.dynamic_var = tk.IntVar()
        self.static_check = tk.Checkbutton(master, text="Static Analysis", variable=self.static_var)
        self.dynamic_check = tk.Checkbutton(master, text="Dynamic Analysis", variable=self.dynamic_var)
        self.static_check.pack()
        self.dynamic_check.pack()

        self.analyze_button = tk.Button(master, text="Analyze", command=self.analyze_file)
        self.analyze_button.pack()

    def browse_file(self):
        file_path = filedialog.askopenfilename()
        self.file_path.delete(0, tk.END)
        self.file_path.insert(0, file_path)

    def analyze_file(self):
        file_path = self.file_path.get()
        perform_static = self.static_var.get()
        perform_dynamic = self.dynamic_var.get()

        if not file_path:
            messagebox.showerror("Error", "Please select a file to analyze")
            return 
        
        if perform_static:
            detected_iocs = detect_wannacry()
            if detected_iocs:
                print(f"WannaCry indicators detected: {detected_iocs}")
            else:
                print("No WannaCry indicators detected.")
            
            heuristic = heuristic_analysis(file_path)
            if heuristic:
                print("Suspicious file detected based on heuristic analysis.")

            clamav_result = clamav_scan(file_path)
            if clamav_result:
                print(f"ClamAV scan result: {clamav_result}")

        if perform_dynamic:
            activate_kill_switch()
            behavioral_analysis("taskche.exe")
            network_monitor()

        apply_preventive_measures()
        messagebox.showinfo("Info", "Analysis completed")

# GUI setup
if __name__ == "__main__":
    root = tk.Tk()
    gui = MalwareAnalysisGUI(root)
    root.mainloop()