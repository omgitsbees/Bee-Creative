import argparse
import pefile
import psutil
import requests
import time
import tkinter as tk 
from tkinter import filedialog, messagebox

import tkinter as tk
from tkinter import filedialog, messagebox

class MalwareAnalysisGUI:
    def __init__(self, master):
        self.master = master
        master.title("Malware Analysis Tool")

        self.label = tk.Label(master, text="Select a file to analyze")
        self.label.pack()

        self.file_path = tk.Entry(master, width=50)
        self.file_path.pack()

        self.browse_button = tk.Button(master, text="Browse", command=self.browse_file)
        self.browse_button.pack()

        self.static_var = tk.IntVar()
        self.dynamic_var = tk.IntVar()
        self.static_check = tk.Checkbutton(master, text="Static Analysis", variable=self.static_var)
        self.dynamic_check = tk.Checkbutton(master, text="Dynamic Analysis", variable=self.dynamic_var)
        self.static_check.pack()
        self.dynamic_check.pack()

        self.analyze_button = tk.Button(master, text="Analyze", command=self.analyze_file)
        self.analyze_button.pack()

    def browse_file(self):
        file_path = filedialog.askopenfilename()
        self.file_path.delete(0, tk.END)
        self.file_path.insert(0, file_path)

    def analyze_file(self):
        file_path = self.file_path.get()
        perform_static = self.static_var.get()
        perform_dynamic = self.dynamic_var.get()

        if not file_path:
            messagebox.showerror("Error", "Please select a file to analyze")
            return

        if perform_static:
            static_analysis(file_path)

        if perform_dynamic:
            dynamic_analysis(file_path)

        messagebox.showinfo("Info", "Analysis completed")

# GUI setup
if __name__ == "__main__":
    root = tk.Tk()
    gui = MalwareAnalysisGUI(root)
    root.mainloop()

INTEZER_API_UR = 'https://analyze.intezer.com/api/v2-0'
INTEZER_API_KEY = 'your_intezer_api_key'

def get_access_token():
    response = requests.post(f'{INTEZER_API_URL}/get-access-token', headers={
        'Content-Type': 'application/json',
        'api-key': INTEZER_API_KEY
    })
    response.raise_for_status()
    return response.json()['result']

def submit_file(file_path, access_token):
    with open(file_path, 'rb') as file:
        response = requests.post(f'{INTEZER_API_URL}/analyze', headers={
            'Authorization': f'Bearer {access_token}'
        }, files={'file': file})
        response.raise_for_status()
        return response.json()['result']
    
def get_analysis_report(result_url, access_token):
    while True:
        response = requests.get(result_url, headers={
            'Authorization': f'Bearer {access_token}'
        })
        response.raise_for_status()
        report = response.json() 
        if report['status'] == 'finished':
            return report
        time.sleep(10)

def static_analysis(file_path):
    try:
        pe = pefile.PE(file_path)
        print(f"File: {file_path}")
        print(f"Entry Point: {hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint)}")
        print(f"Sections: {[section.Name.decode().strip() for section in pe.sections]}")
        print(f"Imported Libraries: {[entry.dll.decode() for entry in pe.DIRECTORY_ENTRY_IMPORT]}")
        print(f"Imported Functions: {[imp.name.decode() for entry in pe.DIRECTORY_ENTRY_IMPORT for imp in entry.imports]}")
    except Exception as e:
        print(f"Error: {e}")
    
def monitor_process(process_name):
    for proc in psutil.process_iter(['pid', 'name']):
        if proc.info['name'] == process_name:
            print(f"Monitoring process: {proc.info['name']} (PID: {proc.info['pid']})")
            while True:
                cpu_usage = proc.cpu_percent(intervals=1)
                mem_usage = proc.memory_info().rss
                print(f"CPU Usage: {cpu_usage}%, Memory Usage: {mem_usage / (1024 * 1024)} MB")
                if not proc.is_running():
                    print("Process terminated")
                    break

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Malware Analysis Tool")
    parser.add_argument("file", help="Path to the file to analyze")
    parser.add_argument("--static", action="store_true", help="Perform static analysis")
    parser.add_argument("--dynamic", action="store_true", help="Perform dynamic analysis")
    parser.add_argument("--monitor", help="Monitor a process by name")

    args = parser.parse.args()

    if args.static:
        static_analysis(args.file)
    if args.dynamic:
        dynamic_analysis(args.file)
    if args.monitor:
        monitor_process(args.monitor)